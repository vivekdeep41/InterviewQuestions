Stream api programs
-------------------------->
1.) Given the sentence, find the word with highest length.
I/p: "I am learning streams api in java"
o/p: "learning"

--> String s = "I am learning streams api in java";
	String longestWord = Stream.of(s.split(" ")).max(Comparator.comparing(String::length)).get();

2.) Remove duplicate from string. and return in same order
I/P: asdbasdfghl
o/p: bfgh

--> String s = "asdbasdfghl"
	String s = Stream.of(s.split("")).distinct().forEach(System.out::print);
	
3.) Find the word that has 2nd highest length of string
--> String s1 = Arrays.stream(s.split("")).sorted(Comparator.comparing(String::legth)).reversed().skip(0).findFirst().get();	

4.)Find the occurence of each word
--> Map<String, Long> map = Arrays.stream.of(s.split("")).collect(Collectors.groupingBy(i->i, Collectors.counting()));

Q.5) Given a sentence, find the words with specified number of vowels
--> String s = "I am learning streams api in java";
	








Q. Find missing number from unsorted list?
--> ArrayList al = Stream.of(1,8,3,2,4,5,9).sorted().collect(Collector.toList());
	//al={1,2,3,4,5,8,9}
	ArrayList newlist = new ArrayList();
	int max = al.get(al.size()-1);
	for(int i=1; i<=max;i++) {
		if(i!=al.get(i-1)) {//i=6
			//newlist.add(al.get(i-1));
			System.out.println(al.get(i-1));
		}
	}
.
Q. Find sequential difference between arraylist?
--> ArrayList al = Stream.of(1,8,3,2,4,5,9).sorted().collect(Collector.toList());
	int diff1 = al.get(1)-al.get(0); 
	int diff2 = al.get(2)-al.get(1);
	int diff =0;
	if(diff1.equal(diff2)){
		diff = diff1;
	}
	
	
	I want to remove parents Mediclaim nomination and reduce coverage amount but I am unable to do so. Kindly do the needful.
	
	
	
	Q1. Count words starting with vowels.

al.streams().filter(e->e.startsWith('a'|'e'|'i'|'o'|'u')).count();

Given a list of Student objects, where each student has a name and an age, write a Java program using streams to:
1. Filter out all students whose age is greater than 23.
2. Store the filtered students in a List<Student>.
3. Store only the names of those filtered students in a List<String>.
4. Also, generate a comma-separated string of those names.

ArrayList<Student> studentWithAgeGreaterThan23 = al.stream().filter(e->e.age>23).collect(Collectors.toList());

ArrayList<Student> studentName = studentWithAgeGreaterThan23.stream().map(Student::getName);

String s = studentName.stream().map(e->e)//use Collecors.toList



class Employee {
	public String name = "Deep";
	public int age ="29";
	//constructor
	//
	
}



class EmployeeService {
	Employee e = new Employee();
	public static void main(String args[]) {
		System.out.println("employee name::"+e.getName()+ "employee age::"+e.age);
	}
}

coles



public class EmpService {
private static volatile EmpService instance;
private EmpService() {}
public static EmpService getInstance() {
if (instance == null) {
synchronized EmpService.class) {
if (instance == null) instance = new EmpService();
}
}
return instance;
}
}

	