
Form validation in Angular is an essential aspect of building robust and user-friendly applications. Angular provides both template-driven forms and reactive forms, each with its own approach to validation.

Template-Driven Forms:
1. Basic Example:
In template-driven forms, you can use Angular directives like ngModel for two-way data binding and ngForm to represent a form.

Example:

html
Copy code
<!-- app.component.html -->
<form #myForm="ngForm" (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" [(ngModel)]="model.name" required>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" [(ngModel)]="model.email" required email>

  <button type="submit" [disabled]="myForm.invalid">Submit</button>
</form>
typescript
Copy code
// app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  model = {
    name: '',
    email: '',
  };

  onSubmit(): void {
    // Handle form submission
    console.log('Form submitted:', this.model);
  }
}
2. Validation Messages:
Display validation messages based on form control state.

Example:

html
Copy code
<form #myForm="ngForm" (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" [(ngModel)]="model.name" required>
  <div *ngIf="myForm.controls['name'].invalid && (myForm.controls['name'].dirty || myForm.controls['name'].touched)">
    <div *ngIf="myForm.controls['name'].errors?.required">Name is required.</div>
  </div>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" [(ngModel)]="model.email" required email>
  <div *ngIf="myForm.controls['email'].invalid && (myForm.controls['email'].dirty || myForm.controls['email'].touched)">
    <div *ngIf="myForm.controls['email'].errors?.required">Email is required.</div>
    <div *ngIf="myForm.controls['email'].errors?.email">Invalid email format.</div>
  </div>

  <button type="submit" [disabled]="myForm.invalid">Submit</button>
</form>
Reactive Forms:
1. Basic Example:
Reactive forms provide more control and flexibility over form validation.

Example:

typescript
Copy code
// app.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent implements OnInit {
  myForm: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.myForm = this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
    });
  }

  onSubmit(): void {
    // Handle form submission
    console.log('Form submitted:', this.myForm.value);
  }
}
html
Copy code
<!-- app.component.html -->
<form [formGroup]="myForm" (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" formControlName="name">
  <div *ngIf="myForm.get('name').invalid && myForm.get('name').touched">
    <div *ngIf="myForm.get('name').hasError('required')">Name is required.</div>
  </div>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" formControlName="email">
  <div *ngIf="myForm.get('email').invalid && myForm.get('email').touched">
    <div *ngIf="myForm.get('email').hasError('required')">Email is required.</div>
    <div *ngIf="myForm.get('email').hasError('email')">Invalid email format.</div>
  </div>

  <button type="submit" [disabled]="myForm.invalid">Submit</button>
</form>
2. Custom Validators:
Create custom validators for complex validation logic.

Example:

typescript
Copy code
// custom.validators.ts
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export function forbiddenNameValidator(forbiddenName: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const forbidden = forbiddenName.test(control.value);
    return forbidden ? { forbiddenName: { value: control.value } } : null;
  };
}
typescript
Copy code
// app.component.ts
import { forbiddenNameValidator } from './custom.validators';

// ...

ngOnInit(): void {
  this.myForm = this.fb.group({
    name: ['', [Validators.required, forbiddenNameValidator(/bob/i)]],
    email: ['', [Validators.required, Validators.email]],
  });
}